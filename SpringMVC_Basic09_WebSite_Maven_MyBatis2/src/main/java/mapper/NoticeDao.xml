<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
[key point]
Mybatis 사용 프로젝트 진행시

1. mapper namespace 이름 : DAO 가지는 interface 이름을 그대로
2. <select id="" 이름을  interface 가지는 함수명과 동일
result : interface 와 mapper 있으면 실행

 int insertBoard(BoardDTO dto);
 int updateBoard(BoardDTO dto);
 int deleteBoard(BoardDTO dto);
 
 List<BoardDTO> getBoardList(HashMap map);
 BoardDTO getBoard(int num);
 
 void updateHit(int num); //조회수 증가
 int getBoardCount(); //전체 글 수
 
 void insertReply(BoardDTO dto); //답변처리
 void updateSort(BoardDTO dto);  //답변 처리(step(sort) 값 변경)
 
	//게시물 개수
	public int getCount(String field, String query) throws ClassNotFoundException, SQLException;
	
	//전체 게시물
	public List<Notice> getNotices(int page, String field, String query) throws ClassNotFoundException, SQLException;
	
	//게시물 삭제
	public int delete(String seq) throws ClassNotFoundException, SQLException;
	
	//게시물 수정
	public int update(Notice notice) throws ClassNotFoundException, SQLException;
	
	//게시물 상세
	public Notice getNotice(String seq) throws ClassNotFoundException, SQLException;
	
	//게시물 입력
	public int insert(Notice n) throws ClassNotFoundException, SQLException;
-->

<mapper namespace="dao.NoticeDao">
	<!--  
	
	1. parameter 1개: 생략 or parameter Type = "int" 명시
	2. parameter DTO객체 : parameterType="vo.Notice"
	3. parameter가 1개 이상 (DTO가 없는 경우)
	3.1 HashMap을 사용 >> map.put(key, value) map.put(key, value) >>	parameterType= "Map"
	3.2 mybatis parameter 값을 read 방법: param1 , param2, param3 .....
	
	ex) public int getCount(String field, String query)  >> mapper >> param1, param2
		parameter 1개는 >> param 1 이 불가능
	-->
	<select id = "getCount" resultType="int">
		SELECT COUNT(*) CNT 
		FROM NOTICES 
		WHERE ${param1} LIKE '%${param2}%'
	</select>
	<!-- public List<Notice> getNotices(int page, String field, String query)
	param1 > page param2 > field, parma3 > query
	
	>> 논리나 수식이 필요한 것은 DB에게
	
	int srow = 1 + (page - 1) * 5;
	int erow = 5 + (page - 1) * 5;	
	
	
	 -->
	<select id="getNotices" resultType = "vo.Notice">
		SELECT * FROM
					(
					SELECT ROWNUM NUM, N.* 
					FROM (
							SELECT * 
							FROM NOTICES WHERE ${param2} '%${param3}%' LIKE ? ORDER BY REGDATE DESC
							) N
						)
		WHERE NUM BETWEEN 1 + (${param1} - 1) * 5 AND 5 + (${param1} - 1) * 5
	</select>
	
	<!-- //게시물 상세
	public Notice getNotice(String seq) -->
	<select id="getNotice" resultType = "vo.Notice">
		SELECT seq,title,writer,content,regdate,hit,filesrc,filesrc2 
		FROM NOTICES 
		WHERE SEQ= #{seq}
	</select>
	
	<!-- //게시물 삭제
	public int delete(String seq)  -->
	<delete id="delete">
		DELETE NOTICES WHERE SEQ=#{seq}
	</delete>
	
	<!-- //게시물 수정
	public int update(Notice notice) 
	파일 수정 :null , null
	1개 수정 : 1.jpg, null
	2개 수정 : 1.jpg, 2.jpg
	값이 넘어오지 않는 경우 null 처리방법
	
	#{fileSrc, jdbcType=VARCHAR} >> fileSrc = null
	-->
	<update id="update" parameterType="vo.Notice">
		UPDATE NOTICES 
		SET TITLE=#{title}, 
			CONTENT=#{content}, 
			FILESRC=#{fileSrc, jdbcType=VARCHAR} , 
			FILESRC2=#{fileSrc2, jdbcType=VARCHAR} 
		WHERE SEQ=#{seq}	
	</update>
	
	<!-- //게시물 입력
	public int insert(Notice n) 
	-->
	<!-- <insert id="insert" parameterType="vo.Notice">
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
		VALUES( (SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES), #{title}, #{content}, 'bituser', SYSDATE, 0, #{fileSrc},#{fileSrc2})
	</insert> -->
	<insert id="insert" parameterType="vo.Notice">
		<selectKey order = "BEFORE" keyProperty="seq" resultType="int">
			SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES
		</selectKey>
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
		VALUES( #{sep}, #{title}, #{content}, 'bituser', SYSDATE, 0, #{fileSrc},#{fileSrc2})
	</insert>
</mapper>


















